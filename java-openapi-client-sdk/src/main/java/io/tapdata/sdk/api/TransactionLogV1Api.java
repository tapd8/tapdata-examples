/*
 * Tapdata OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: moa-v1.1.0-117-g6b02a67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tapdata.sdk.api;

import io.tapdata.sdk.ApiCallback;
import io.tapdata.sdk.ApiClient;
import io.tapdata.sdk.ApiException;
import io.tapdata.sdk.ApiResponse;
import io.tapdata.sdk.Configuration;
import io.tapdata.sdk.Pair;
import io.tapdata.sdk.ProgressRequestBody;
import io.tapdata.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tapdata.sdk.model.Filter1;
import io.tapdata.sdk.model.InlineResponse2001;
import io.tapdata.sdk.model.TransactionLog;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionLogV1Api {
    private ApiClient localVarApiClient;

    public TransactionLogV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionLogV1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for transactionLogV1ControllerCreate
     * @param transactionLog  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerCreateCall(TransactionLog transactionLog, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionLog;

        // create path and map variables
        String localVarPath = "/api/v1/Transaction_Log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }


    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionLogV1ControllerCreateValidateBeforeCall(TransactionLog transactionLog, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionLogV1ControllerCreateCall(transactionLog, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param transactionLog  (optional)
     * @return TransactionLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public TransactionLog transactionLogV1ControllerCreate(TransactionLog transactionLog) throws ApiException {
        ApiResponse<TransactionLog> localVarResp = transactionLogV1ControllerCreateWithHttpInfo(transactionLog);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transactionLog  (optional)
     * @return ApiResponse&lt;TransactionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionLog> transactionLogV1ControllerCreateWithHttpInfo(TransactionLog transactionLog) throws ApiException {
        okhttp3.Call localVarCall = transactionLogV1ControllerCreateValidateBeforeCall(transactionLog, null);
        Type localVarReturnType = new TypeToken<TransactionLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionLog  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerCreateAsync(TransactionLog transactionLog, final ApiCallback<TransactionLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionLogV1ControllerCreateValidateBeforeCall(transactionLog, _callback);
        Type localVarReturnType = new TypeToken<TransactionLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionLogV1ControllerDeleteById
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log DELETE success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerDeleteByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/Transaction_Log/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }


    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionLogV1ControllerDeleteByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionLogV1ControllerDeleteById(Async)");
        }
        

        okhttp3.Call localVarCall = transactionLogV1ControllerDeleteByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * delete record by id
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log DELETE success </td><td>  -  </td></tr>
     </table>
     */
    public void transactionLogV1ControllerDeleteById(String id) throws ApiException {
        transactionLogV1ControllerDeleteByIdWithHttpInfo(id);
    }

    /**
     * delete record by id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log DELETE success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionLogV1ControllerDeleteByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionLogV1ControllerDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete record by id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log DELETE success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerDeleteByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionLogV1ControllerDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionLogV1ControllerFindById
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerFindByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/Transaction_Log/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }


    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionLogV1ControllerFindByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionLogV1ControllerFindById(Async)");
        }
        

        okhttp3.Call localVarCall = transactionLogV1ControllerFindByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * get record by id
     * 
     * @param id  (required)
     * @return TransactionLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public TransactionLog transactionLogV1ControllerFindById(String id) throws ApiException {
        ApiResponse<TransactionLog> localVarResp = transactionLogV1ControllerFindByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * get record by id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;TransactionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionLog> transactionLogV1ControllerFindByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionLogV1ControllerFindByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TransactionLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get record by id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction_Log model instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerFindByIdAsync(String id, final ApiCallback<TransactionLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionLogV1ControllerFindByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TransactionLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionLogV1ControllerFindPage
     * @param filter  (optional, default to null)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object of page data, result.data is Transaction_Log model instances, result.total is model count. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerFindPageCall(Filter1 filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/Transaction_Log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPair(buildQuery(filter)));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    private Map<String, String> buildQuery(Filter1 filter) {
        Map<String, String> filterMap = new HashMap<>();
        Object where = filter.getWhere();
        Integer limit = filter.getLimit();
        Integer skip = filter.getSkip();
        List<String> order = filter.getOrder();
        Object fields = filter.getFields();

        if (where != null && where instanceof Map && !((Map) where).isEmpty()) {
            for (Map.Entry<String, Object> entry : ((Map<String, Object>) where).entrySet()) {
                filterMap.put("filter[where]" + entry.getKey(), entry.getValue().toString());
            }
        }

        if (limit != null && limit > 0) {
            filterMap.put("filter[limit]", limit.toString());
        }

        if (skip != null && skip >= 0) {
            filterMap.put("filter[skip]", skip.toString());
        }

        if (order != null && !order.isEmpty()) {
            for (int i = 0; i < order.size(); i++) {
                filterMap.put("filter[order][" + i + "]", order.get(i));
            }
        }

        if (fields != null) {
            Field[] declaredFields = fields.getClass().getDeclaredFields();
            if (declaredFields != null) {
                for (Field declaredField : declaredFields) {
                    if (!Modifier.isStatic(declaredField.getModifiers())) {
                        String originfieldName = declaredField.getName();
                        String fieldName = originfieldName.replace("_", "");
                        fieldName = fieldName.replace("-", "");
                        fieldName = fieldName.replace(".", "");
                        String getter = "get" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
                        try {
                            Method method = fields.getClass().getMethod(getter);
                            if (method != null) {
                                Object value = method.invoke(fields);
                                if (value != null
                                        && (value.equals(true)
                                        || value.equals(false))) {
                                    filterMap.put("filter[fields][" + (originfieldName.equals("id") ? "_id" : originfieldName) + "]", value.toString());
                                }
                            }
                        } catch (Exception e) {
                            continue;
                        }
                    }
                }
            }
        }

        return filterMap;
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionLogV1ControllerFindPageValidateBeforeCall(Filter1 filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = transactionLogV1ControllerFindPageCall(filter, _callback);
        return localVarCall;

    }

    /**
     * get record list by page and limit
     * 
     * @param filter  (optional, default to null)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object of page data, result.data is Transaction_Log model instances, result.total is model count. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 transactionLogV1ControllerFindPage(Filter1 filter) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = transactionLogV1ControllerFindPageWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * get record list by page and limit
     * 
     * @param filter  (optional, default to null)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object of page data, result.data is Transaction_Log model instances, result.total is model count. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> transactionLogV1ControllerFindPageWithHttpInfo(Filter1 filter) throws ApiException {
        okhttp3.Call localVarCall = transactionLogV1ControllerFindPageValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get record list by page and limit (asynchronously)
     * 
     * @param filter  (optional, default to null)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object of page data, result.data is Transaction_Log model instances, result.total is model count. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerFindPageAsync(Filter1 filter, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionLogV1ControllerFindPageValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionLogV1ControllerUpdateById
     * @param id  (required)
     * @param transactionLog  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log PATCH success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerUpdateByIdCall(String id, TransactionLog transactionLog, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionLog;

        // create path and map variables
        String localVarPath = "/api/v1/Transaction_Log/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }


    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionLogV1ControllerUpdateByIdValidateBeforeCall(String id, TransactionLog transactionLog, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionLogV1ControllerUpdateById(Async)");
        }
        

        okhttp3.Call localVarCall = transactionLogV1ControllerUpdateByIdCall(id, transactionLog, _callback);
        return localVarCall;

    }

    /**
     * update record by id
     * 
     * @param id  (required)
     * @param transactionLog  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log PATCH success </td><td>  -  </td></tr>
     </table>
     */
    public void transactionLogV1ControllerUpdateById(String id, TransactionLog transactionLog) throws ApiException {
        transactionLogV1ControllerUpdateByIdWithHttpInfo(id, transactionLog);
    }

    /**
     * update record by id
     * 
     * @param id  (required)
     * @param transactionLog  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log PATCH success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionLogV1ControllerUpdateByIdWithHttpInfo(String id, TransactionLog transactionLog) throws ApiException {
        okhttp3.Call localVarCall = transactionLogV1ControllerUpdateByIdValidateBeforeCall(id, transactionLog, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update record by id (asynchronously)
     * 
     * @param id  (required)
     * @param transactionLog  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Transaction_Log PATCH success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionLogV1ControllerUpdateByIdAsync(String id, TransactionLog transactionLog, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionLogV1ControllerUpdateByIdValidateBeforeCall(id, transactionLog, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
